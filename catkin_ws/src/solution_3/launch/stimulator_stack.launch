<launch>

    <arg name="initial_pose_x" default="1.8"/>
    <arg name="initial_pose_y" default="5.0"/>
    <arg name="initial_pose_yaw" default="0"/>

    <!-- Running the base -->
    <include file="$(find tb)/launch/tb.launch" />

    <!-- Running the pointcloud_to_laserscan -->
    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan" output="screen">
        <remap from="/cloud_in" to="/camera/depth/points" />
        <remap from="/scan" to="/scan_virtual" />
        <rosparam>
            target_frame: "base_link" # Leave disabled to output scan in pointcloud frame
            transform_tolerance: 0.01
            min_height: 0.035
            max_height: 0.1

            angle_min: -1.5 # -M_PI/2
            angle_max: 1.5 # M_PI/2
            angle_increment: 0.0087 # M_PI/360.0
            scan_time: 0.3333
            range_min: 0.2
            range_max: 50.0
            use_inf: true
            inf_epsilon: 1.0

            # Concurrency level, affects number of pointclouds queued for processing and number of threads used
            # 0 : Detect number of cores
            # 1 : Single threaded
            # 2->inf : Parallelism level
            concurrency_level: 1
        </rosparam>
    </node>

    <!-- Running laser_scan_merge -->
    <!-- <node pkg="ira_laser_tools" name="laserscan_multi_merger" type="laserscan_multi_merger" output="screen">
        <param name="destination_frame" value="base_link"/>
        <param name="scan_destination_topic" value="/scan_merged"/>
        <param name="laserscan_topics" value="/scan /scan_virtual" />

        <param name="angle_min" value="-3.14159265"/>
        <param name="angle_max" value="3.14159265"/>
        <param name="angle_increment" value="0.0058"/>
        <param name="scan_time" value="0.0333333"/>
        <param name="range_min" value="0.3"/>
        <param name="range_max" value="50.0"/>
    </node> -->

    <!-- Running the map_server for amcl -->
    <node name="map_server_amcl" pkg="map_server" type="map_server" args="$(find solution_2)/maps/map1_r.yaml" output="screen">
        <remap from="/map" to="/maps/map_amcl" />
    </node>

    <!-- Running the map_server for move_base -->
    <node name="map_server_mb" pkg="map_server" type="map_server" args="$(find solution_2)/maps/map1_markup_all.yaml" output="screen">
        <remap from="/map" to="/maps/map_mb" />
    </node>

    <!-- Running the merger -->
    <node name="Merger" pkg="solution_2" type="merge_grids.py" output="screen">
        <param name="merger/source_map_1/updating" value="False" />
        <param name="merger/source_map_2/updating" value="True" />
        <param name="merger/source_map_3/updating" value="True" />

        <remap from="/merger/source_map_1" to="/maps/map_mb" />
        <remap from="/merger/source_map_2" to="/maps/crossroads" />
        <remap from="/merger/source_map_3" to="/maps/start_wall" />
        <remap from="/merger/target_map" to="/maps/map_merged" />
    </node>

    <!-- Running AMCL -->
    <node pkg="amcl" type="amcl" name="amcl" output="screen">
        <rosparam file="$(find solution_2)/params_urpylka/amcl.yaml" command="load" />

        <param name="initial_pose_x" value="$(arg initial_pose_x)" />
        <param name="initial_pose_y" value="$(arg initial_pose_y)" />
        <param name="initial_pose_yaw" value="$(arg initial_pose_yaw)" />

        <remap from="/map" to="/maps/map_amcl" />
    </node>

    <!-- Running move_base -->
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
        <rosparam file="$(find solution_2)/params_urpylka/costmap_common_params.yaml" command="load" ns="global_costmap" />
        <rosparam file="$(find solution_2)/params_urpylka/costmap_common_params.yaml" command="load" ns="local_costmap" />

        <rosparam file="$(find solution_2)/params_urpylka/local_costmap_params.yaml" command="load" />
        <rosparam file="$(find solution_2)/params_urpylka/global_costmap_params.yaml" command="load" />
        <!-- <rosparam file="$(find solution_2)/params_urpylka/teb_local_planner_params.yaml" command="load" /> -->

        <!-- <rosparam file="$(find solution_1)/params/costmap_common_params.yaml" command="load" ns="global_costmap" />
        <rosparam file="$(find solution_1)/params/costmap_common_params.yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find solution_1)/params/local_costmap_params.yaml" command="load" />
        <rosparam file="$(find solution_1)/params/global_costmap_params.yaml" command="load" /> -->

        <rosparam file="$(find solution_1)/params/base_local_planner_params.yaml" command="load" />

        <param name="base_global_planner" value="global_planner/GlobalPlanner" />
        <param name="base_local_planner" value="teb_local_planner/TebLocalPlannerROS" />
        <param name="controller_frequency" value="10.0" />

        <remap from="/cmd_vel" to="/mobile_base/commands/velocity" />
        <remap from="/map" to="/maps/map_merged" />
    </node>

    <node name="locker_crossroads" pkg="solution_3" type="locker_oncoming_traffic.py" output="screen" />
    <!-- <node name="finite_stimulator" pkg="solution_3" type="fm.py" output="screen" /> -->
</launch>