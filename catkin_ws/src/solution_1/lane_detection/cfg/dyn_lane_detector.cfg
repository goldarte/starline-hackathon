#!/usr/bin/env python
PACKAGE = "solution_1"

from dynamic_reconfigure.parameter_generator_catkin import *
import cv2

gen = ParameterGenerator()

function_enum = gen.enum([      gen.const("threshold",              int_t, 0, "cv2.Threshold() function"),
                                gen.const("adaptive_threshold",     int_t, 1, "cv2.adaptiveThreshold() function")],
                                "An enum to set threshold function")

thr_type_enum = gen.enum([      gen.const("THRESH_BINARY",              int_t, cv2.THRESH_BINARY, ""),
                                gen.const("THRESH_BINARY_INV",          int_t, cv2.THRESH_BINARY_INV, ""),
                                gen.const("THRESH_TRUNC",               int_t, cv2.THRESH_TRUNC, ""),
                                gen.const("THRESH_TOZERO",              int_t, cv2.THRESH_TOZERO, ""),
                                gen.const("THRESH_TOZERO_INV",          int_t, cv2.THRESH_TOZERO_INV, "")],
                                "An enum to set type for cv2.Threshold function")

thr_type_flag_enum = gen.enum([ gen.const("NO_FLAG",                    int_t, 0, ""),
                                gen.const("THRESH_OTSU",                int_t, cv2.THRESH_OTSU, ""),
                                gen.const("THRESH_TRIANGLE",            int_t, cv2.THRESH_TRIANGLE, "")],
                                "An enum to set type flag for cv2.Threshold function")

a_thr_type_enum = gen.enum([    gen.const("THRESH_BINARY",              int_t, cv2.THRESH_BINARY, ""),
                                gen.const("THRESH_BINARY_INV",          int_t, cv2.THRESH_BINARY_INV, "")],
                                "An enum to set type for cv2.apaptiveThreshold function")

a_thr_method_enum = gen.enum([  gen.const("ADAPTIVE_THRESH_MEAN_C",     int_t, cv2.ADAPTIVE_THRESH_MEAN_C, ""),
                                gen.const("ADAPTIVE_THRESH_GAUSSIAN_C", int_t, cv2.ADAPTIVE_THRESH_GAUSSIAN_C , "")],
                                "An enum to set type for cv2.apaptiveThreshold function")

gen.add("undistort_image",  bool_t, 0, "Undistort image",  True)
gen.add("thr_function",     int_t,  0, "Select threshold function via enum", 1, 0, 1, edit_method=function_enum)
gen.add("thr_max_val",      int_t,  0, "Maximum value to set by thresholding", 255,  0, 255)
gen.add("thr_val",          int_t,  0, "Threshold value", 127, 0, 255)
gen.add("thr_type",         int_t,  0, "Threshold type", cv2.THRESH_BINARY, 0, 7, edit_method=thr_type_enum)
gen.add("thr_type_flag",    int_t,  0, "Threshold type flag", 0, 0, 16, edit_method=thr_type_flag_enum)
gen.add("a_thr_type",       int_t,  0, "Adaptive threshold type", cv2.THRESH_BINARY, 0, 1, edit_method=a_thr_type_enum)
gen.add("a_thr_method",     int_t,  0, "Adaptive threshold method", cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 0, 1, edit_method=a_thr_method_enum)
gen.add("a_thr_blocksize",  int_t,  0, "Adaptive threshold blocksize", 11,  3, 99)
gen.add("a_thr_C",          int_t,  0, "Adaptive threshold C", 2,  3, 99)

exit(gen.generate(PACKAGE, "lane_detector", "lane_detector_"))