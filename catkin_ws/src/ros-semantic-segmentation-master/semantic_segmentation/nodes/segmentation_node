#!/usr/bin/env python3

import os
import tensorflow as tf
import numpy as np
import rospy
import cv_bridge
from cv_resize import resize
from sensor_msgs.msg import Image

os.environ['CUDA_VISIBLE_DEVICES'] = '-1'

def on_image(msg):
    on_image.last_image = msg
on_image.last_image = None

if __name__ == "__main__":
    rospy.init_node('road_segmentation_node')

    MODEL = rospy.get_param('~model', 'mnv2_bdd100k_driveable_513')
    TOPIC_IMAGE = rospy.get_param('~topic_image', 'image_raw')
    TOPIC_SEMANTIC = rospy.get_param('~topic_semantic', 'semantic')
    TOPIC_SEMANTIC_COLOR = rospy.get_param('~topic_semantic_color', 'semantic_color')
    RATE = rospy.get_param('~rate', 30.0)

    sub_image = rospy.Subscriber(TOPIC_IMAGE, Image, on_image)
    pub_semantic = rospy.Publisher(TOPIC_SEMANTIC, Image, queue_size = 1)
    pub_semantic_color = rospy.Publisher(TOPIC_SEMANTIC_COLOR, Image, queue_size = 1)

    rate = rospy.Rate(RATE)

    model = getattr(__import__('models', globals(), locals(), fromlist = [MODEL]), MODEL).Model()
    rospy.set_param("semantic_categories", model.categories)

    while not rospy.is_shutdown():
        rate.sleep()

        if on_image.last_image is None:
            continue

        last_image_cv2 = cv_bridge.imgmsg_to_cv2(on_image.last_image)
        last_image_cv2_resized = resize(last_image_cv2, (513, 513))

        header = on_image.last_image.header
        semantic = model.infer([last_image_cv2_resized])[0]

        if pub_semantic.get_num_connections() > 0:
            m = cv_bridge.cv2_to_imgmsg(semantic.astype(np.uint8), encoding = 'mono8')
            m.header.stamp.secs = header.stamp.secs
            m.header.stamp.nsecs = header.stamp.nsecs
            pub_semantic.publish(m)

        if pub_semantic_color.get_num_connections() > 0:
            m = cv_bridge.cv2_to_imgmsg(model.color_map[semantic.astype(np.uint8)], encoding = 'rgb8')
            m.header.stamp.secs = header.stamp.secs
            m.header.stamp.nsecs = header.stamp.nsecs
            pub_semantic_color.publish(m)

